#!/usr/bin/env python
"""
Script to clear report files generated by App Reviews AI.
This script removes visualizations and other output files to clean up the reports directory.
"""
import os
import shutil
import argparse
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("app_reviews")

def clear_reports(backup: bool = False) -> bool:
    """
    Clear report files from the reports directory.
    
    Args:
        backup: Whether to create a backup of reports before clearing
        
    Returns:
        True if successful, False otherwise
    """
    # Define paths to clear
    reports_dir = "reports"
    viz_dir = os.path.join(reports_dir, "visualizations")
    
    # Check if directories exist
    if not os.path.exists(reports_dir):
        logger.warning(f"Reports directory '{reports_dir}' not found. Nothing to clear.")
        return False
    
    try:
        # Create backup if requested
        if backup:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_dir = f"{reports_dir}_backup_{timestamp}"
            logger.info(f"Creating backup in '{backup_dir}'...")
            shutil.copytree(reports_dir, backup_dir)
            logger.info(f"Backup created successfully.")
        
        # Clear visualization files
        if os.path.exists(viz_dir):
            logger.info(f"Clearing visualization files from '{viz_dir}'...")
            for file_name in os.listdir(viz_dir):
                file_path = os.path.join(viz_dir, file_name)
                if os.path.isfile(file_path):
                    os.remove(file_path)
                    logger.debug(f"Removed: {file_path}")
        
        # Clear other report files (preserving directory structure)
        logger.info(f"Clearing other report files from '{reports_dir}'...")
        for root, dirs, files in os.walk(reports_dir):
            for file_name in files:
                # Skip .gitkeep files to preserve directory structure in git
                if file_name == ".gitkeep":
                    continue
                file_path = os.path.join(root, file_name)
                os.remove(file_path)
                logger.debug(f"Removed: {file_path}")
        
        logger.info(f"All reports have been cleared successfully.")
        return True
    
    except Exception as e:
        logger.error(f"Error clearing reports: {e}")
        return False

def main():
    """Main entry point for the script."""
    parser = argparse.ArgumentParser(description="Clear report files generated by App Reviews AI.")
    parser.add_argument(
        "--backup", 
        action="store_true", 
        help="Create a backup of reports before clearing"
    )
    parser.add_argument(
        "--verbose", 
        action="store_true", 
        help="Show detailed debug information"
    )
    
    args = parser.parse_args()
    
    # Set logging level
    if args.verbose:
        logger.setLevel(logging.DEBUG)
    
    # Clear reports
    success = clear_reports(backup=args.backup)
    
    if success:
        print("Reports cleared successfully.")
    else:
        print("Failed to clear reports. See log for details.")

if __name__ == "__main__":
    main()